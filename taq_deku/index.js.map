{"mappings":";;;;AAAA;ACAA;;;AAMA,kCAAkC;AAClC,MAAM,0BAAI,GAAG,CAAA,GAAA,WAAI,CAAA,CAAC,SAAS,CAAC,CAAA,GAAA,WAAO,CAAA,CAAC,AAAC;AAiBrC,MAAM,6BAAO,GAAG,OAAO,IAAU,GAA8B;IAC9D,MAAM,QACL,IAAI,CAAA,QACJ,IAAI,CAAA,QACJ,IAAI,CAAA,UACJ,MAAM,CAAA,IACN,GAAG,IAAI,AAAC;IAET;;;;;;;;IAQG,CAEH,OAAQ,IAAI;QACX,KAAK,mBAAmB;YACvB,yBAAyB;YACzB,MAAM,0BAAI,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC;YAC/C,OAAO;gBACN,MAAM,EAAE,OAAO;gBACf,IAAI,EAAE,EAAE;aACR,CAAC;QACH;YACC,MAAM,IAAI,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,oDAAoD,CAAC,CAAC,CAAC;KAChF;CACD,AAAC;IAEF,wCAeE,GAfa,OAAO,IAAkC,GAA8B;IACrF,MAAM,IAAI,GAAG,IAAI,AAAQ,AAAC;IAE1B,IAAI;QACH,MAAM,SAAS,GAAG,MAAM,6BAAO,CAAC,IAAI,CAAC,AAA2B,AAAC;QACjE,yBAAyB;QACzB,gDAAgD;QAChD,MAAM,MAAM,GAAG,AAAC,MAAM,IAAI,SAAS,GAAI,SAAS,CAAC,IAAI,GAAG,SAAS,AAAC;QAClE,OAAO,CAAA,GAAA,kBAAW,CAAA,CAAC,MAAM,CAAC,CAAC;KAC3B,CAAC,OAAO,GAAG,EAAE;QACb,MAAM,KAAK,GAAG,GAAG,AAAS,AAAC;QAC3B,IAAI,KAAK,CAAC,OAAO,EAChB,OAAO,CAAA,GAAA,mBAAY,CAAA,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KAEpC;CACD;;;ADnED,CAAA,GAAA,aAAM,CAAA,CAAC,MAAM,CAAC,IAAO,CAAA;QACpB,MAAM,EAAE,KAAK;QACb,OAAO,EAAE,OAAO;QAChB,KAAK,EAAE,MAAM;QACb,KAAK,EAAE;YACN,CAAA,GAAA,WAAI,CAAA,CAAC,MAAM,CAAC;gBACX,IAAI,EAAE,mBAAmB;gBACzB,OAAO,EAAE,mBAAmB;gBAC5B,WAAW,EAAE,sDAAsD;gBACnE,OAAO,EAAE,EAAE;gBACX,OAAO,EAAE,OAAO;gBAChB,QAAQ,EAAE,MAAM;aAChB,CAAC;SAgBF;eACD,wCAAK;KACL,CAAA,AAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC","sources":["index.ts","src/proxy.ts"],"sourcesContent":["import { Option, Plugin, PositionalArg, Task } from '@taqueria/node-sdk';\nimport proxy from './src/proxy';\n\nPlugin.create(() => ({\n\tschema: '0.1',\n\tversion: '0.4.0',\n\talias: 'deku',\n\ttasks: [\n\t\tTask.create({\n\t\t\ttask: 'deku-bootstrapper',\n\t\t\tcommand: 'deku-bootstrapper',\n\t\t\tdescription: 'TODO:Upload and pin files using your pinata account.',\n\t\t\taliases: [],\n\t\t\thandler: 'proxy',\n\t\t\tencoding: 'json',\n\t\t}),\n\t\t// Pinning Not Implemented Yet\n\t\t// Task.create({\n\t\t// \ttask: 'pin',\n\t\t// \tcommand: 'pin [hash]',\n\t\t// \tdescription: 'Pin a file already on ipfs with your pinata account.',\n\t\t// \taliases: [],\n\t\t// \thandler: 'proxy',\n\t\t// \tpositionals: [\n\t\t// \t\tPositionalArg.create({\n\t\t// \t\t\tplaceholder: 'hash',\n\t\t// \t\t\tdescription: 'Ipfs hash of the file or directory that is already on the ipfs network.',\n\t\t// \t\t\ttype: 'string',\n\t\t// \t\t}),\n\t\t// \t]\n\t\t// }),\n\t],\n\tproxy,\n}), process.argv);\n","import { sendAsyncErr, sendAsyncRes, sendErr, sendJsonRes } from '@taqueria/node-sdk';\nimport { LoadedConfig, RequestArgs, SanitizedAbsPath } from '@taqueria/node-sdk/types';\n\n// running external processes\nimport { exec as execRaw } from 'child_process';\nimport util from 'util';\n// need to be wrapped in a promise\nconst exec = util.promisify(execRaw);\n\n\n// TODO: What should this be, it was removed from the sdk\ntype PluginResponse =\n\t| void\n\t| {\n\t\trender: 'table';\n\t\tdata: unknown[];\n\t};\n\ninterface Opts extends RequestArgs.ProxyRequestArgs {\n\treadonly path?: string;\n\t// TODO: change to the cli of deku\n\treadonly hash?: string;\n}\n\nconst execute = async (opts: Opts): Promise<PluginResponse> => {\n\tconst {\n\t\ttask,\n\t\tpath,\n\t\thash,\n\t\tconfig,\n\t} = opts;\n\n\t/*const auth: PinataAuth = {\n\t\t// TODO: Where should this be stored?\n\t\t// pinataJwtToken: (config as Record<string, any>).credentials.pinataJwtToken,\n\t\tpinataJwtToken: process.env['pinataJwtToken'] as string,\n\t};\n\n\tif (!auth.pinataJwtToken) {\n\t\tthrow new Error(`The 'credentials.pinataJwtToken' was not found in config`);\n\t}*/\n\n\tswitch (task) {\n\t\tcase 'deku-bootstrapper':\n\t\t\t// call externall process\n\t\t\tawait exec(`deku-bootstrapper setup-identity`);\n\t\t\treturn {\n\t\t\t\trender: 'table',\n\t\t\t\tdata: [],\n\t\t\t};\n\t\tdefault:\n\t\t\tthrow new Error(`${task} is not an understood task by the ipfs-pinata plugin`);\n\t}\n};\n\nexport default async (args: RequestArgs.ProxyRequestArgs): Promise<PluginResponse> => {\n\tconst opts = args as Opts;\n\n\ttry {\n\t\tconst resultRaw = await execute(opts) as Record<string, unknown>;\n\t\t// TODO: Fix deno parsing\n\t\t// Without this, `data.reduce is not a function`\n\t\tconst result = ('data' in resultRaw) ? resultRaw.data : resultRaw;\n\t\treturn sendJsonRes(result);\n\t} catch (err) {\n\t\tconst error = err as Error;\n\t\tif (error.message) {\n\t\t\treturn sendAsyncErr(error.message);\n\t\t}\n\t}\n};\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"/"}