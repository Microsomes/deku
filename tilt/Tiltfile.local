def add_sandbox (no_of_deku_nodes):
  # run setup when we build
  local_resource(
    "deku-setup",
    "sleep 5 && nix run .#sandbox setup local %s" % no_of_deku_nodes,
    resource_deps=["flextesa"],
    labels=["scripts"],
    )

  if config.tilt_subcommand == "ci":
    # bootstrap the deku network and run some tests
    local_resource(
      "smoke-test",
      "sleep 5 && nix run .#sandbox smoke-test local %s" % no_of_deku_nodes,
      resource_deps=["deku-setup"],
      labels=["scripts"],
      auto_init=True, # trigger once at start
      trigger_mode=TRIGGER_MODE_MANUAL,
      allow_parallel=True,
      )

    local_resource(
      "deposit-withdraw-test",
      "sleep 5 && nix run .#sandbox deposit-withdraw-test",
      resource_deps=["smoke-test"],
      labels=["scripts"],
      auto_init=True, # trigger once at start
      trigger_mode=TRIGGER_MODE_MANUAL,
      allow_parallel=True,
      )
  else:
    # bootstrap the deku network, it will be run after deku-setup and the nodes have started
    local_resource(
      "deku-net",
      serve_cmd="nix run .#sandbox start local %s" % no_of_deku_nodes,
      resource_deps=["deku-setup"],
      labels=["scripts"],
      auto_init=True, # trigger once at start
      trigger_mode=TRIGGER_MODE_MANUAL,
      )

def load_deku_services (_):
  print('no-op')

def make_deku_yaml (_):
  print('no-op')
  # We must return a valid (but empty) docker-compose configuration
  return encode_yaml({'version': '3.8', 'services': {}})

# tezos_yaml = "./docker-compose.yml"
# docker_compose([deku_yaml, tezos_yaml])

# for index, deku_service in enumerate(get_services(decode_yaml(deku_yaml))):
#     dc_resource(deku_service, labels=["deku"], resource_deps=["deku-setup", "deku-vm-%s" % index])

# for tezos_service in get_services(read_yaml(tezos_yaml)):
#     dc_resource(tezos_service, labels=["tezos"])

# def deku_vm_setup(n, vm_args):
#   for i in range(n):
#     local_resource(
#       "deku-vm-%s" % i, 
#       serve_cmd="%s data/%s/state_transition" % (vm_args, i),
#       allow_parallel=True,
#       labels="vms",
#       resource_deps=["deku-setup"],
#       readiness_probe=probe( # I have to use a readiness probe because when putting the vm in background there is no more reader on the fifo pipe, so when the node try to send the tx to the vm it fails with a Unix.EPIPE error
#         initial_delay_secs=1,
#         exec=exec_action(['true'])  # After one seconds, the vm is considered running # TODO: find a better probe
#       )
#     )

# deku_vm_setup(no_of_deku_nodes, path_to_the_vm)
