"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[454],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),k=a,h=d["".concat(s,".").concat(k)]||d[k]||p[k]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},22772:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:1},o="Quick-start with Deku-P",l={unversionedId:"Deku-P/dekup_quickstart",id:"Deku-P/dekup_quickstart",title:"Quick-start with Deku-P",description:"In this 20-minute tutorial, we'll get you up and running with Deku-P sidechains.",source:"@site/../docs/Deku-P/dekup_quickstart.md",sourceDirName:"Deku-P",slug:"/Deku-P/dekup_quickstart",permalink:"/docs/Deku-P/dekup_quickstart",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../docs/Deku-P/dekup_quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Deku Parametric",permalink:"/docs/category/deku-parametric"},next:{title:"Deku-P Overview",permalink:"/docs/Deku-P/deku_p_overview"}},s={},u=[{value:"Installing the Tool",id:"installing-the-tool",level:2},{value:"Our First VM",id:"our-first-vm",level:2},{value:"Testing the VM",id:"testing-the-vm",level:3},{value:"Running a Local Network",id:"running-a-local-network",level:3},{value:"Interacting with the Chain",id:"interacting-with-the-chain",level:2},{value:"Next Steps",id:"next-steps",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quick-start-with-deku-p"},"Quick-start with Deku-P"),(0,a.kt)("p",null,"In this 20-minute tutorial, we'll get you up and running with Deku-P sidechains.\nYou'll learn how to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Write a Deku-P virtual machine in NodeJS "),(0,a.kt)("li",{parentName:"ul"},"Deploy a Deku-P network locally using Docker"),(0,a.kt)("li",{parentName:"ul"},"Interact with the network via the ",(0,a.kt)("inlineCode",{parentName:"li"},"deku-cli"))),(0,a.kt)("h2",{id:"installing-the-tool"},"Installing the Tool"),(0,a.kt)("p",null,"For this example you'll need the following tools installed:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"NodeJS")," and npm."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/install/"},"Docker")," and Docker Compose (ships with Docker in recent versions, check the ",(0,a.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/install/"},"installation guide")," for more info)"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"deku-cli"))),(0,a.kt)("h2",{id:"our-first-vm"},"Our First VM"),(0,a.kt)("p",null,"Deku's consensus layer determines the order in which transactions are processed,\nensuring no two nodes ever commit to inconsistent histories. However, it\nis up to you, the VM developer, to determine what these transactions mean."),(0,a.kt)("p",null,"A Deku VM is a program that receives transactions submitted by users and\nresponds with a series of writes and reads to the Deku data store using\nthe SDK. Deku VM's must be deterministic to ensure consistency across all nodes,\nbut beyond that there is no restriction on their behavior. "),(0,a.kt)("p",null,"To get started, we'll first need the NodeJS SDK."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\nnpm install @marigold-dev/deku-p-sdk\n")),(0,a.kt)("p",null,"Let's make a VM that maintains a global counter that can incremented and\ndecremented. Create a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"vm.js")," and add the following:"),(0,a.kt)("p",null,"FIXME: we should programatically fetch this from ../../examples/tutorial/vm.js or vice\nversa"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { main, get, set } = require("deku-sdk");\n\nconst transition = (tx) => {\n    // Parse the operation data\n    const operation = JSON.parse(tx.operation);\n    console.log("Parsed operation:", operation);\n    const [operationKind, value] = operation;\n    \n    // Retrieve the current state of the \'counter\' key.\n    // This is an in-memory lookup - no IO required.\n    const counter = JSON.parse(get("counter"));\n    console.log("Current state:", counter);\n\n    switch (operation[0]) {\n        case "Increment":\n            set("counter", JSON.stringify(counter + value))\n            break;\n        case "Decrement":\n            set("counter", JSON.stringify(counter - value));\n        default:\n            const error = `Unrecognized operation kind: ${operationKind}`;\n            console.error(error)\n            // Signal an error to the user by returning a string\n            return error\n    }\n}\n\n// Here we define the initial state of blockchain\'s key-value\n// store on the genesis block. \nconst initialState = {\n  counter: JSON.stringify(42)\n}\n\nmain(initialState, transition);\n\n')),(0,a.kt)("h3",{id:"testing-the-vm"},"Testing the VM"),(0,a.kt)("p",null,"During development we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"deku-cli")," to test our VM."),(0,a.kt)("p",null,"First we'll need to create an identity for the user that will run the transaction:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli generate-identity ./wallet.json\n")),(0,a.kt)("p",null,"Next, we can run a mock transaction against our vm. In this case we'll submit an\n",(0,a.kt)("inlineCode",{parentName:"p"},"Increment")," operation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli submit-transaction ./wallet.json '[\"Increment\", 3]' 'node ./vm.js'\n")),(0,a.kt)("h3",{id:"running-a-local-network"},"Running a Local Network"),(0,a.kt)("p",null,"To run a sandbox Deku-P network first start a sandbox Tezos network\nwith ","[Flextesa]","(FIXME: link to flextesa):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run ...\n")),(0,a.kt)("p",null,"We'll run our Deku cluster with 4 nodes. To automate this, download\nthe helper script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://asdfasdfasdf/ -o deku_cluster.sh\nchmod +x ./deku_cluster.sh\n")),(0,a.kt)("p",null,"Start the deku cluster by giving the command to run your vm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./deku_cluster.sh 'node ./vm.js'\n")),(0,a.kt)("p",null,"The helper script is brief and annotated - check it out!"),(0,a.kt)("p",null,"You can also read more about each configuration option for the deku-node\nby running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"deku-node --help\n")),(0,a.kt)("h2",{id:"interacting-with-the-chain"},"Interacting with the Chain"),(0,a.kt)("p",null,"We can confirm the chain is working by submitting a transaction using\nthe wallet we created earlier:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli submit-transaction --api-uri http://localhost:8080 ./wallet.json '[\"Increment\", 3]'\n")),(0,a.kt)("p",null,"For writing browser-based DApp frontends, check out the ",(0,a.kt)("a",{parentName:"p",href:"/docs/Deku-P/frontend_tutorial"},"frontend tutorial")," that builds\non this guide, or see our more detailed ","[examples]","(FIXME: broken link)."),(0,a.kt)("h2",{id:"next-steps"},"Next Steps"),(0,a.kt)("p",null,"With just a few lines of Javascript, you created an application-specific blockchain\ndistributed across 4 nodes. "),(0,a.kt)("p",null,"However, blockchains are still intrinsically complex distributed systems, and there's lots\nmore to cover!"),(0,a.kt)("p",null,"In the following articles, we'll deep dive Deku's architecture, operational characteristics,\nand deployment best practices. We'll also cover some tips and tricks for a smooth\ndevelopment experience when writing Deku-P applications."))}p.isMDXComponent=!0}}]);