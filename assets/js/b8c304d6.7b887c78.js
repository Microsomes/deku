"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[454],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),k=r,m=p["".concat(l,".").concat(k)]||p[k]||u[k]||a;return t?o.createElement(m,i(i({ref:n},c),{},{components:t})):o.createElement(m,i({ref:n},c))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},22772:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=t(87462),r=(t(67294),t(3905));const a={sidebar_position:2},i="Quick-start with Deku-C",s={unversionedId:"Deku-P/dekup_quickstart",id:"Deku-P/dekup_quickstart",title:"Quick-start with Deku-C",description:"In this 30-minute tutorial, we'll get you up and running with Deku-P",source:"@site/../docs/Deku-P/dekup_quickstart.md",sourceDirName:"Deku-P",slug:"/Deku-P/dekup_quickstart",permalink:"/docs/Deku-P/dekup_quickstart",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../docs/Deku-P/dekup_quickstart.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Deku-P FIXME",permalink:"/docs/Deku-P/intro"},next:{title:"vm_protocol",permalink:"/docs/Deku-P/vm_protocol"}},l={},d=[{value:"Installing the Tool",id:"installing-the-tool",level:2},{value:"Our First VM",id:"our-first-vm",level:2},{value:"Testing the VM",id:"testing-the-vm",level:3},{value:"Packaging the VM",id:"packaging-the-vm",level:3},{value:"Building a Network with Docker Compose",id:"building-a-network-with-docker-compose",level:2},{value:"Creating a DApp",id:"creating-a-dapp",level:2},{value:"Conclusion",id:"conclusion",level:2}],c={toc:d};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quick-start-with-deku-c"},"Quick-start with Deku-C"),(0,r.kt)("p",null,"In this 30-minute tutorial, we'll get you up and running with Deku-P\nsidechains. You'll learn how to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Write a Deku-P virtual machine in NodeJS "),(0,r.kt)("li",{parentName:"ul"},"Deploy a Deku-P network locally using Docker"),(0,r.kt)("li",{parentName:"ul"},"Create a DApp frontend for your chain using React using ",(0,r.kt)("inlineCode",{parentName:"li"},"deku-toolkit"))),(0,r.kt)("p",null,"You can follow along with the commands and code in this doc, or you\ncan check out the code directly from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/marigold-dev/deku-p-quickstart"},"Github"),"."),(0,r.kt)("h2",{id:"installing-the-tool"},"Installing the Tool"),(0,r.kt)("p",null,"For this example you'll need the following tools installed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"deku-cli")," FIXME: installation instructions?"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"NodeJS")," and npm."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/install/"},"Docker")," and Docker Compose (ships with Docker in recent versions, check the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/install/"},"installation guide")," for more info)")),(0,r.kt)("h2",{id:"our-first-vm"},"Our First VM"),(0,r.kt)("p",null,"Deku's consensus layer determines the order in which these transactions are processed,\nensuring no two nodes ever commit to inconsistent histories. However, it\nis up to you, the VM developer, to determine what these transactions mean."),(0,r.kt)("p",null,"A Deku VM is a program that receives transactions submitted by users and\nresponds with a series of writes and reads to the Deku data store using the\nthe SDK. Deku VM's must be deterministic to ensure a consistency across all nodes,\nbut beyond that there is no restriction on their behavior. "),(0,r.kt)("p",null,"To get started, we'll first need to the NodeJS SDK."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm init\nnpm install @marigold-dev/deku-p-sdk\n")),(0,r.kt)("p",null,"Let's make a VM that maintains a global counter that can incremented and\ndecremented. Create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"vm.js")," and add the following:"),(0,r.kt)("p",null,"FIXME: we should programatically fetch this from ../../examples/tutorial/vm.js or vice\nversa"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const { main, get, set } = require("deku-sdk");\n\nconst transition = (tx) => {\n    // Parse the operation data\n    const operation = JSON.parse(tx.operation);\n    console.log("Parsed operation:", operation);\n    const [operationKind, value] = operation;\n    \n    // Retrieve the current state of the \'counter\' key.\n    // This is an in-memory lookup - no IO required.\n    const counter = JSON.parse(get("counter"));\n    console.log("Current state:", counter);\n\n    switch (operation[0]) {\n        case "Increment":\n            set("counter", JSON.stringify(counter + value))\n            break;\n        case "Decrement":\n            set("counter", JSON.stringify(counter - value));\n        default:\n            const error = `Unrecognized operation kind: ${operationKind}`;\n            console.error(error)\n            // Signal an error to the user by returning a string\n            return error\n    }\n}\n\n// Here we define the initial state of blockchain\'s key-value\n// store on the genesis block. \nconst initialState = {\n    counter: JSON.stringify(42)\n}\n\nmain(initialState, transition);\n')),(0,r.kt)("h3",{id:"testing-the-vm"},"Testing the VM"),(0,r.kt)("p",null,"During development we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"deku-cli")," to test our VM."),(0,r.kt)("p",null,"First we'll need to create a wallet for the user that will run the transaction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli create-wallet ./wallet.json\n")),(0,r.kt)("p",null,"Next, we can run a mock transaction against our vm. In this case we'll submit an\n",(0,r.kt)("inlineCode",{parentName:"p"},"Increment")," operation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli create-wallet ./wallet.json '[\"Increment\", 3]' 'node ./vm.js'\n")),(0,r.kt)("h3",{id:"packaging-the-vm"},"Packaging the VM"),(0,r.kt)("p",null,"To simplify running the chain locally, we'll package our vm with Docker."),(0,r.kt)("p",null,"Create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," and add the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile"},"FROM node\nCOPY ./vm.js .\nCMD node ./vm.js\n")),(0,r.kt)("p",null,"Build and tag the image as ",(0,r.kt)("inlineCode",{parentName:"p"},"my-vm"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker build . -t my-vm\n")),(0,r.kt)("h2",{id:"building-a-network-with-docker-compose"},"Building a Network with Docker Compose"),(0,r.kt)("p",null,"With the VM written and packaged, we can now declare a runnable Deku\nnetwork with Docker compose."),(0,r.kt)("p",null,"Here's an annotated configuration for a network of four Deku nodes.\nCopy this into a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3.6"\nvolumes:\n  # Each Deku node communicates with its own instance of our VM\n  # via Unix named pipes. These volumes allow the docker processes\n  # to both access the same pipes.\n  node-0:\n  node-1:\n  node-2:\n  node-3:\nservices:\n  # We run a full Tezos sandbox network using Flextesa (https://tezos.gitlab.io/flextesa/).\n  # The deku-flextesa image has already been pre-populated with a Deku bridge contract\n  # configured for these nodes.\n  flextesa:\n    container_name: deku_flextesa\n    # FIXME: publish this image somewhere\n    image: deku_with_felipe\n    command: kathmandubox start\n    environment:\n      - block_time=4\n      - flextesa_node_cors_origin=*\n    ports:\n      - 127.0.0.1:20000:20000\n    expose:\n      - 20000/tcp\n  deku-node-0:\n    container_name: deku-node-0\n    image: ghcr.io/marigold-dev/deku:34bd08b6233ef3ff264dbc33cd62693d062cfd20\n    volumes:\n      - node-0:/run/deku\n    ports:\n      # Deku exposes an RPC on port 8080 by default. We\'ll expose that\n      # port on a single node to allow our frontend to communicate with\n      # the network.\n      - 0.0.0.0:8080:8080\n    expose:\n      # By default Deku gossip is exchanged via TCP on port 4440.\n      - 4440/tcp\n    environment:\n      # A b58-encoded Ed25519 secret used to sign blocks\n      - DEKU_SECRET=edsk4UWkJqpZrAm26qvJE8uY9ZFGFqQiFuBcDyEPASXeHxuD68WvvF\n      # A list of of the tz1 public key hashes for each validator in this network\n      # (derived from their secret keys)\n      - DEKU_VALIDATORS=tz1fpf9DffkGAnzT6UKMDoS4hZjNmoEKhGsK,tz1PYdVbnLwiqKo3fLFXTKxw6K7BhpddQPh8,tz1Pv4viWq7ye4R6cr9SKR3tXiZGvpK34SKi,tz1cXKCCxLwYCHDSrx9hfD5Qmbs4W8w2UKDw\n      - DEKU_VALIDATOR_URIS=deku-node-1:4440,deku-node-2:4440,deku-node-3:4440,deku-node-3:4440\n      - DEKU_TEZOS_RPC_NODE=http://flextesa:20000\n      # The secret key of a Tezos with which to post updates to Tezos. In Flextesa networks\n      # this wallet is pre-seeded with funds.\n      - DEKU_TEZOS_SECRET=edsk3QoqBuvdamxouPhin7swCvkQNgq4jP5KZPbwWNnwdZpSpJiEbq\n      # The address of the bridge contract deployed to the deku-flextesa Tezos network.\n      - DEKU_TEZOS_CONSENSUS_ADDRESS=KT1LHcxdRTgyFp1TdrgodVekLFkQwzFnTJcY\n      - DEKU_API_ENABLE=true\n      # During local development, it is sometimes useful to use smaller block sizes\n      # and to artificially throttle the block rate so as to not consume all the CPU\'s resources.\n      - DEKU_DEFAULT_BLOCK_SIZE=1000\n      - DEKU_MINIMUM_BLOCK_LATENCY=0.5\n  deku-vm-0:\n    image: my-vm\n    container_name: deku-vm-0\n    environment:\n      - DEKU_VM_DEBUG_LOGGING=true\n    volumes:\n      # We connect our vm to the node via the docker volume \'node-0\'.\n      - node-0:/run/deku\n  # The rest of the config is similar for each of the three other nodes.\n  deku-node-1:\n    container_name: deku-node-1\n    image: ghcr.io/marigold-dev/deku:34bd08b6233ef3ff264dbc33cd62693d062cfd20\n    volumes:\n      - node-1:/run/deku\n    expose:\n      - 4440/tcp \n    links:\n      - "flextesa:sandbox"      \n    environment:\n      # Node specific config\n      - DEKU_SECRET=edsk2mbL2Z7bAmRnuYbmsRe8Yu9rgAq1h993SDxoZncmqyMHDECyBa\n      # Common config\n      - DEKU_VALIDATORS=tz1fpf9DffkGAnzT6UKMDoS4hZjNmoEKhGsK,tz1PYdVbnLwiqKo3fLFXTKxw6K7BhpddQPh8,tz1Pv4viWq7ye4R6cr9SKR3tXiZGvpK34SKi,tz1cXKCCxLwYCHDSrx9hfD5Qmbs4W8w2UKDw\n      - DEKU_VALIDATOR_URIS=deku-node-1:4440,deku-node-2:4440,deku-node-3:4440,deku-node-3:4440\n      - DEKU_TEZOS_RPC_NODE=http://flextesa:20000\n      - DEKU_TEZOS_SECRET=edsk3QoqBuvdamxouPhin7swCvkQNgq4jP5KZPbwWNnwdZpSpJiEbq\n      - DEKU_TEZOS_CONSENSUS_ADDRESS=KT1LHcxdRTgyFp1TdrgodVekLFkQwzFnTJcY\n      - DEKU_API_ENABLE=true\n      - DEKU_DEFAULT_BLOCK_SIZE=1000\n      - DEKU_MINIMUM_BLOCK_LATENCY=0.5\n  deku-vm-1:\n    image: my-vm\n    container_name: deku-vm-1\n    volumes:\n      - node-1:/run/deku\n  deku-node-2:\n    container_name: deku-node-2\n    image: ghcr.io/marigold-dev/deku:34bd08b6233ef3ff264dbc33cd62693d062cfd20\n    volumes:\n      - node-2:/run/deku\n    expose:\n      - 4440/tcp \n    environment:\n      # Node specific config\n      - DEKU_SECRET=edsk3dx8ZfcaBXsuLsk8fawS1qxjHbZtEoEdpAwxhsjmYTQhoEUxFk\n      # Common config\n      - DEKU_VALIDATORS=tz1fpf9DffkGAnzT6UKMDoS4hZjNmoEKhGsK,tz1PYdVbnLwiqKo3fLFXTKxw6K7BhpddQPh8,tz1Pv4viWq7ye4R6cr9SKR3tXiZGvpK34SKi,tz1cXKCCxLwYCHDSrx9hfD5Qmbs4W8w2UKDw\n      - DEKU_VALIDATOR_URIS=deku-node-1:4440,deku-node-2:4440,deku-node-3:4440,deku-node-3:4440\n      - DEKU_TEZOS_RPC_NODE=http://flextesa:20000\n      - DEKU_TEZOS_SECRET=edsk3QoqBuvdamxouPhin7swCvkQNgq4jP5KZPbwWNnwdZpSpJiEbq\n      - DEKU_TEZOS_CONSENSUS_ADDRESS=KT1LHcxdRTgyFp1TdrgodVekLFkQwzFnTJcY\n      - DEKU_API_ENABLE=true\n      - DEKU_DEFAULT_BLOCK_SIZE=1000\n      - DEKU_MINIMUM_BLOCK_LATENCY=0.5\n  deku-vm-2:\n    image: my-vm\n    container_name: deku-vm-2\n    volumes:\n      - node-2:/run/deku   \n  deku-node-3:\n    container_name: deku-node-3\n    image: ghcr.io/marigold-dev/deku:34bd08b6233ef3ff264dbc33cd62693d062cfd20\n    volumes:\n      - node-2:/run/deku\n    expose:\n      - 4440/tcp \n    links:\n      - "flextesa:sandbox"       \n    environment:\n      # Node specific config\n      - DEKU_SECRET=edsk3MwFfcGp5FsZgrX8FGiBiDutX2kfAuPzU6VdZpKYLyDRVPb879\n      # Common config\n      - DEKU_VALIDATORS=tz1fpf9DffkGAnzT6UKMDoS4hZjNmoEKhGsK,tz1PYdVbnLwiqKo3fLFXTKxw6K7BhpddQPh8,tz1Pv4viWq7ye4R6cr9SKR3tXiZGvpK34SKi,tz1cXKCCxLwYCHDSrx9hfD5Qmbs4W8w2UKDw\n      - DEKU_VALIDATOR_URIS=deku-node-1:4440,deku-node-2:4440,deku-node-3:4440,deku-node-3:4440\n      - DEKU_TEZOS_RPC_NODE=http://flextesa:20000\n      - DEKU_TEZOS_SECRET=edsk3QoqBuvdamxouPhin7swCvkQNgq4jP5KZPbwWNnwdZpSpJiEbq\n      - DEKU_TEZOS_CONSENSUS_ADDRESS=KT1LHcxdRTgyFp1TdrgodVekLFkQwzFnTJcY\n      - DEKU_API_ENABLE=true\n      - DEKU_DEFAULT_BLOCK_SIZE=1000\n      - DEKU_MINIMUM_BLOCK_LATENCY=0.5\n  deku-vm-3:\n    image: my-vm\n    container_name: deku-vm-3\n    volumes:\n      - node-3:/run/deku   \n')),(0,r.kt)("p",null,"You can now run your chain with ",(0,r.kt)("inlineCode",{parentName:"p"},"docker compose"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker compose up\n")),(0,r.kt)("p",null,"We can confirm the chain is working by submitting a transaction using\nthe wallet we created earlier:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli submit-transaction --api-uri http://localhost:8080 ./wallet.json '[\"Increment\", 3]'\n")),(0,r.kt)("h2",{id:"creating-a-dapp"},"Creating a DApp"),(0,r.kt)("p",null,"Let's create a friendly interface to the chain using ReactJS, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"deku-toolkit"),"\nlibrary."),(0,r.kt)("p",null,"First create a ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," with the required packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "my-app",\n  "version": "0.1.0",\n  "private": true,\n  "dependencies": {\n    "@marigold-dev/deku-p-sdk": "0.1.0",\n    "@marigold-dev/deku-toolkit": "file:../../client",\n    "@taquito/signer": "^13.0.1",\n    "@taquito/taquito": "^13.0.1",\n    "react": "^18.2.0",\n    "react-dom": "^18.2.0",\n    "react-scripts": "^2.1.3",\n    "web-vitals": "^2.1.4"\n  },\n  "devDependencies": {\n    "@types/node": "^16.11.49",\n    "@types/react": "^18.0.17",\n    "@types/react-dom": "^18.0.6"\n  },\n  "scripts": {\n    "start": "set port=9090 && react-scripts start"\n  },\n  "browserslist": {\n    "development": [\n      "last 1 chrome version",\n      "last 1 firefox version",\n      "last 1 safari version"\n    ]\n  }\n}\n')),(0,r.kt)("p",null,"Install the required packages with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install"),"."),(0,r.kt)("p",null,"Next create a file ",(0,r.kt)("inlineCode",{parentName:"p"},"./public/index.html")," to serve as the entrypoint\nto our app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<!DOCTYPE html>\n<html lang="en">\n\n<head>\n  <title>Deku-P App</title>\n</head>\n\n<body>\n  <div id="root"></div>\n  <script src="index.js"><\/script>\n</body>\n\n</html>\n')),(0,r.kt)("p",null,"Lastly, make a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"./src/index.jsx"),". Below are the annotated contents:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import React, { useState, useEffect } from "react";\nimport ReactDOM from "react-dom";\n\nimport { DekuToolkit } from "@marigold-dev/deku-toolkit";\nimport { InMemorySigner } from "@taquito/signer";\n\n// The DekuToolkit uses Taquito for signing operations.\n// Taquito supports a variety of hardware- and browser-based\n// wallets, but for this demo we\'ll simply use a hard-coded private key\n// and the InMemory signer.\nconst signer = new InMemorySigner(\n  "edsk3ym86W81aL2gfZ25WuWQrisJM5Vu8cEayCR6BGsRNgfRWos8mR"\n);\n\n// \nconst deku = new DekuToolkit({\n  signer,\n  dekuRPC: "http://localhost:8080",\n  tezosRPC: "http://localhost:20000",\n});\n\nconst MyFirstDApp = () => {\n  const [counter, setCounter] = useState(null);\n  const [delta, setDelta] = useState(1);\n  const handleInputChange = (event) => setDelta(event.target.value);\n\n  // Submit transactions just like with deku-cli. Once accepted in a block,\n  // they\'ll be processed by your vm.\n  const handleIncrement = () => deku.tx(JSON.stringify(["Increment", delta]));\n  const handleDecrement = () => deku.tx(JSON.stringify(["Decrement", delta]));\n  useEffect(() => {\n    // You can subscribe to changes in the values of particular keys for fine-grained\n    // access to the chain\'s state.\n    deku.subscribeToKey("counter", (counterState) => setCounter(JSON.parse(counterState)));\n  });\n  return (\n    <div>\n      <p>\n        <b>Current Counter State: {counter}</b>\n      </p>\n      <button onClick={handleIncrement}>-</button>\n      <input value={delta} onChange={handleInputChange} />\n      <button onClick={handleDecrement}>+</button>\n    </div>\n  );\n};\n\nReactDOM.render(<MyFirstDApp />, document.getElementById("root"));\n')),(0,r.kt)("p",null,"With everything in place, you're ready to run your DApp!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# required by react-scripts for some versions of nodejs\nexport NODE_OPTIONS=--openssl-legacy-provider\nnpm start\n")),(0,r.kt)("p",null,"To get a better view of what's happening in the VM,\ntry ",(0,r.kt)("inlineCode",{parentName:"p"},"docker logs deku-vm-0")," and submitting a transaction through the\nweb app."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"With just a few lines of Javascript, you created an application-specific blockchain\ndistributed across 4 nodes. "),(0,r.kt)("p",null,"However, all blockchains are still intrinsically complex distributed\nsystems. In the following articles, we'll dive deeper into the Deku-P system,\nincluding its architecture, operation characteristics, and deployment best practices."))}u.isMDXComponent=!0}}]);