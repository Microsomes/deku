/*! For license information please see b8c304d6.d430f03f.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[454],{41535:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),k=Symbol.iterator;var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,f={};function g(e,t,n){this.props=e,this.context=t,this.refs=f,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=f,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var w=b.prototype=new y;w.constructor=b,m(w,g.prototype),w.isPureReactComponent=!0;var v=Array.isArray,D=Object.prototype.hasOwnProperty,N={current:null},_={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,r){var o,a={},i=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)D.call(t,o)&&!_.hasOwnProperty(o)&&(a[o]=t[o]);var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===a[o]&&(a[o]=l[o]);return{$$typeof:n,type:e,key:i,ref:s,props:a,_owner:N.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var P=/\/+/g;function x(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function E(e,t,o,a,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return i=i(l=e),e=""===a?"."+x(l,0):a,v(i)?(o="",null!=e&&(o=e.replace(P,"$&/")+"/"),E(i,t,o,"",(function(e){return e}))):null!=i&&(O(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(P,"$&/")+"/")+e)),t.push(i)),1;if(l=0,a=""===a?".":a+":",v(e))for(var u=0;u<e.length;u++){var c=a+x(s=e[u],u);l+=E(s,t,o,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=k&&e[k]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=E(s=s.value,t,o,c=a+x(s,u++),i);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function C(e,t,n){if(null==e)return e;var r=[],o=0;return E(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function j(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var T={current:null},K={transition:null}},27378:(e,t,n)=>{n(41535)},3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),k=o,h=p["".concat(l,".").concat(k)]||p[k]||d[k]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},22772:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(87462),o=(n(27378),n(3905));const a={sidebar_position:1},i="Quick-start with Deku-P",s={unversionedId:"Deku-P/dekup_quickstart",id:"Deku-P/dekup_quickstart",title:"Quick-start with Deku-P",description:"In this 20-minute tutorial, we'll get you up and running with Deku-P sidechains.",source:"@site/../docs/Deku-P/dekup_quickstart.md",sourceDirName:"Deku-P",slug:"/Deku-P/dekup_quickstart",permalink:"/docs/Deku-P/dekup_quickstart",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../docs/Deku-P/dekup_quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Deku Parametric",permalink:"/docs/category/deku-parametric"},next:{title:"Deku-P Overview",permalink:"/docs/Deku-P/deku_p_overview"}},l={},u=[{value:"Installing the Tools",id:"installing-the-tools",level:2},{value:"Our First VM",id:"our-first-vm",level:2},{value:"Testing the VM",id:"testing-the-vm",level:3},{value:"Packaging Your Sidechain",id:"packaging-your-sidechain",level:3},{value:"Building a Network with Docker Compose",id:"building-a-network-with-docker-compose",level:2},{value:"Interacting with the Chain",id:"interacting-with-the-chain",level:2},{value:"Next Steps",id:"next-steps",level:2}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quick-start-with-deku-p"},"Quick-start with Deku-P"),(0,o.kt)("p",null,"In this 20-minute tutorial, we'll get you up and running with Deku-P sidechains.\nYou'll learn how to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Write a Deku-P virtual machine in NodeJS "),(0,o.kt)("li",{parentName:"ul"},"Deploy a Deku-P network locally using Docker"),(0,o.kt)("li",{parentName:"ul"},"Interact with the network via the ",(0,o.kt)("inlineCode",{parentName:"li"},"deku-cli"))),(0,o.kt)("h2",{id:"installing-the-tools"},"Installing the Tools"),(0,o.kt)("p",null,"For this example you'll need the following tools installed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"NodeJS")," and npm."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/install/"},"Docker")," and Docker Compose (ships with Docker in recent versions, check the ",(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/install/"},"installation guide")," for more info)"),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"deku-cli")," (see footnote for OSX",(0,o.kt)("sup",{parentName:"li",id:"fnref-1"},(0,o.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),"):",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/marigold-dev/deku/releases/download/v0.1.0/deku-cli\nchmod +x ./deku-cli\ncp ./deku-cli /usr/bin\n")))),(0,o.kt)("h2",{id:"our-first-vm"},"Our First VM"),(0,o.kt)("p",null,"Deku's consensus layer determines the order in which transactions are processed,\nensuring no two nodes ever commit to inconsistent histories. However, it\nis up to you, the VM developer, to determine what these transactions mean."),(0,o.kt)("p",null,"A Deku VM is a program that receives transactions submitted by users and\nresponds with a series of writes and reads to the Deku data store using\nthe SDK. Deku VM's must be deterministic to ensure consistency across all nodes,\nbut beyond that there is no restriction on their behavior. "),(0,o.kt)("p",null,"To get started, we'll first need the NodeJS SDK."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\nnpm install @marigold-dev/deku-p-sdk\n")),(0,o.kt)("p",null,"Let's make a VM that maintains a global counter that can incremented and\ndecremented. Create a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"vm.js")," and add the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { main, get, set } = require("@marigold-dev/deku-p-sdk");\n\nconst transition = (tx) => {\n    // Parse the operation data\n    const operation = JSON.parse(tx.operation);\n    console.log("Parsed operation:", operation);\n    const [operationKind, value] = operation;\n    \n    // Retrieve the current state of the \'counter\' key.\n    // This is an in-memory lookup - no IO required.\n    const counter = JSON.parse(get("counter"));\n    console.log("Current state:", counter);\n\n    switch (operation[0]) {\n        case "Increment":\n            set("counter", JSON.stringify(counter + value))\n            break;\n        case "Decrement":\n            set("counter", JSON.stringify(counter - value));\n        default:\n            const error = `Unrecognized operation kind: ${operationKind}`;\n            console.error(error)\n            // Signal an error to the user by returning a string\n            return error\n    }\n}\n\n// Here we define the initial state of blockchain\'s key-value\n// store on the genesis block. \nconst initialState = {\n  counter: JSON.stringify(42)\n}\n\nmain(initialState, transition);\n\n')),(0,o.kt)("h3",{id:"testing-the-vm"},"Testing the VM"),(0,o.kt)("p",null,"During development we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"deku-cli")," to test our VM."),(0,o.kt)("p",null,"First we'll need to create an identity for the user that will run the transaction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli generate-identity --output ./wallet.json\n")),(0,o.kt)("p",null,"Next, we can run a mock transaction against our vm. In this case we'll submit an\n",(0,o.kt)("inlineCode",{parentName:"p"},"Increment")," operation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli mock-transaction ./wallet.json '[\"Increment\", 3]' 'node ./vm.js'\n")),(0,o.kt)("h3",{id:"packaging-your-sidechain"},"Packaging Your Sidechain"),(0,o.kt)("p",null,"To simplify running the chain locally, we'll package our sidechain with Docker."),(0,o.kt)("p",null,"First create a file called ./start.sh:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"#!/usr/bin/env bash\n\n# A list of of the tz1 public key hashes for each validator in this network\n# (derived from their secret keys)\nexport DEKU_VALIDATORS=tz1fpf9DffkGAnzT6UKMDoS4hZjNmoEKhGsK,tz1PYdVbnLwiqKo3fLFXTKxw6K7BhpddQPh8,tz1Pv4viWq7ye4R6cr9SKR3tXiZGvpK34SKi,tz1cXKCCxLwYCHDSrx9hfD5Qmbs4W8w2UKDw\nexport DEKU_VALIDATOR_URIS=localhost:4440,localhost:4441,localhost:4442,localhost:4443\n\nexport DEKU_TEZOS_RPC_NODE=http://flextesa:20000\n\n# The secret key of a Tezos with which to post updates to Tezos. In Flextesa networks\n# this wallet is pre-seeded with funds.\nexport DEKU_TEZOS_SECRET=edsk3QoqBuvdamxouPhin7swCvkQNgq4jP5KZPbwWNnwdZpSpJiEbq\n\n# The address of the bridge contract deployed to the deku-flextesa Tezos network.\nexport DEKU_TEZOS_CONSENSUS_ADDRESS=KT1LHcxdRTgyFp1TdrgodVekLFkQwzFnTJcY\n\n# During local development, it is sometimes useful to use smaller block sizes\n# and to artificially throttle the block rate so as to not consume all the CPU's resources.\nexport DEKU_DEFAULT_BLOCK_SIZE=5000\n\n# Enable Debug logging for the NodeJS SDK\nexport DEKU_VM_DEBUG_LOGGING=true\n\n# Wait for Flextesa to start\nsleep 5\n\n# Start the deku-node in the background with the path\n# to the pipe for communicating with the VM\ndeku-node --named-pipe-path /run/deku/pipe &\n\nnode ./vm.js /run/deku/pipe\n")),(0,o.kt)("p",null,"Make ./start.sh executable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"chmod +x ./start.sh\n")),(0,o.kt)("p",null,"Next, create a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," and add the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},"# We'll use the official nodejs\n# image as our base, but you should be able\n# to use any image.\nFROM node\n\n# Copy the deku-node and it's required system libraries\n# into your image.\nCOPY --from=ghcr.io/marigold-dev/deku:latest /nix /nix/\nCOPY --from=ghcr.io/marigold-dev/deku:latest /bin/deku-node /bin\n\nWORKDIR /app\n\n# Build your Deku VM\nCOPY package.json /app\nRUN npm install\nCOPY ./vm.js .\nCOPY ./start.sh .\nCMD /app/start.sh\n\n")),(0,o.kt)("p",null,"Build and tag the image as ",(0,o.kt)("inlineCode",{parentName:"p"},"my-sidechain"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker build . -t my-sidechain\n")),(0,o.kt)("h2",{id:"building-a-network-with-docker-compose"},"Building a Network with Docker Compose"),(0,o.kt)("p",null,"With the VM written and packaged, we can now declare a runnable Deku\nnetwork with Docker compose."),(0,o.kt)("p",null,"Here's an annotated configuration for a network of four Deku nodes.\nCopy this into a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3.6"\nservices:\n  # We run a full Tezos sandbox network using Flextesa (https://tezos.gitlab.io/flextesa/).\n  # The deku-flextesa image has already been pre-populated with a Deku bridge contract\n  # configured for these nodes.\n  flextesa:\n    container_name: deku_flextesa\n    # FIXME: publish this image somewhere\n    image: ghcr.io/marigold-dev/deku-fextesa:latest\n    command: kathmandubox start\n    environment:\n      - block_time=4\n      - flextesa_node_cors_origin=*\n    ports:\n      - 127.0.0.1:20000:20000\n  deku-node-0:\n    container_name: deku-node-0\n    image: my-sidechain\n    environment:\n      # A b58-encoded Ed25519 secret used to sign blocks\n      - DEKU_SECRET=edsk4UWkJqpZrAm26qvJE8uY9ZFGFqQiFuBcDyEPASXeHxuD68WvvF\n      - DEKU_PORT=4440\n      # We\'ll enable the API for a single node on port 8080\n      - DEKU_API_ENABLED=true\n      - DEKU_API_PORT=8080\n    network_mode: "host"\n  deku-node-1:\n    container_name: deku-node-1\n    image: my-sidechain\n    environment:\n      - DEKU_SECRET=edsk2mbL2Z7bAmRnuYbmsRe8Yu9rgAq1h993SDxoZncmqyMHDECyBa\n      - DEKU_PORT=4441\n    network_mode: "host" \n  deku-node-2:\n    container_name: deku-node-2\n    image: my-sidechain\n    environment:\n      - DEKU_SECRET=edsk3dx8ZfcaBXsuLsk8fawS1qxjHbZtEoEdpAwxhsjmYTQhoEUxFk\n      - DEKU_PORT=4442\n    network_mode: "host"  \n  deku-node-3:\n    container_name: deku-node-3\n    image: my-sidechain\n    environment:\n      - DEKU_SECRET=edsk3MwFfcGp5FsZgrX8FGiBiDutX2kfAuPzU6VdZpKYLyDRVPb879\n      - DEKU_PORT=4443\n    network_mode: "host"  \n')),(0,o.kt)("p",null,"You can now run your chain with ",(0,o.kt)("inlineCode",{parentName:"p"},"docker compose"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker compose up\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Shutting down the chain quickly during development can cause the chain\nto hard-fork and get stuck. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"docker compose up --force-recreate")," until\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/marigold-dev/deku/issues/911"},"this is fixed"))),(0,o.kt)("h2",{id:"interacting-with-the-chain"},"Interacting with the Chain"),(0,o.kt)("p",null,"We can submit transactions with deku-cli using the wallet we created earlier:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli submit-transaction --api-uri http://localhost:8080 ./wallet.json '[\"Increment\", 3]'\n")),(0,o.kt)("p",null,"Once the operation is included, you can verify the result by querying the ",(0,o.kt)("inlineCode",{parentName:"p"},"counter")," key of\nblockchain state via the REST API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:8080/api/v1/state/unix/counter\n")),(0,o.kt)("p",null,"For more about writing browser-based DApp frontends, check out the ",(0,o.kt)("a",{parentName:"p",href:"/docs/Deku-P/frontend_tutorial"},"frontend tutorial")," that builds\non this guide, or our blockchain game ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/marigold-dev/deku/tree/main/decookies"},"Decookies"),"\nfor an end-to-end example."),(0,o.kt)("h2",{id:"next-steps"},"Next Steps"),(0,o.kt)("p",null,"With just a few lines of Javascript, you created an application-specific blockchain\ndistributed across 4 nodes. "),(0,o.kt)("p",null,"However, blockchains are still intrinsically complex distributed systems, and there's lots\nmore to cover!"),(0,o.kt)("p",null,"In the following articles, we'll deep dive Deku's architecture, operational characteristics,\nand deployment best practices. We'll also cover some tips and tricks for a smooth\ndevelopment experience when writing Deku-P applications."),(0,o.kt)("div",{className:"footnotes"},(0,o.kt)("hr",{parentName:"div"}),(0,o.kt)("ol",{parentName:"div"},(0,o.kt)("li",{parentName:"ol",id:"fn-1"},"If you're on OSX, for now ",(0,o.kt)("inlineCode",{parentName:"li"},"deku-cli")," must be built from source (see the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/marigold-dev/deku#building-from-source"},"README"),").",(0,o.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}d.isMDXComponent=!0}}]);