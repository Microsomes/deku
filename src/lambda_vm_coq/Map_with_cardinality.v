(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Module S.
  Record signature {key : Set} {t : Set -> Set} : Set := {
    key := key;
    t := t;
    empty : forall {a : Set}, t a;
    add : forall {a : Set}, key -> a -> t a -> t a;
    cardinal : forall {a : Set}, t a -> int;
    find : forall {a : Set}, key -> t a -> option a;
  }.
End S.
Definition S := @S.signature.
Arguments S {_ _}.

Module Make.
  Class FArgs {K_t : Set} := {
    K : Stdlib.Map.OrderedType (t := K_t);
  }.
  Arguments Build_FArgs {_}.
  
  Definition key `{FArgs} : Set := K.(Stdlib.Map.OrderedType.t).
  
  Definition Map `{FArgs} := Stdlib.Map.Make K.
  
  Module t.
    Record record {a : Set} : Set := Build {
      cardinality : int;
      values : Map.(Stdlib.Map.S.t) a }.
    Arguments record : clear implicits.
    Definition with_cardinality {t_a} cardinality (r : record t_a) :=
      Build t_a cardinality r.(values).
    Definition with_values {t_a} values (r : record t_a) :=
      Build t_a r.(cardinality) values.
  End t.
  Definition t := t.record.
  
  Definition empty `{FArgs} {A : Set} : t A :=
    {| t.cardinality := 0; t.values := Map.(Stdlib.Map.S.empty) |}.
  
  Definition add `{FArgs} {A : Set}
    (key : K.(Stdlib.Map.OrderedType.t)) (value : A) (t_value : t A) : t A :=
    let '{| t.cardinality := cardinality; t.values := values |} := t_value in
    let cardinality :=
      if Map.(Stdlib.Map.S.mem) key values then
        cardinality
      else
        Z.add cardinality 1 in
    let values := Map.(Stdlib.Map.S.add) key value values in
    {| t.cardinality := cardinality; t.values := values |}.
  
  Definition cardinal `{FArgs} {A : Set} (t_value : t A) : int :=
    t_value.(t.cardinality).
  
  Definition find `{FArgs} {A : Set}
    (key : K.(Stdlib.Map.OrderedType.t)) (t_value : t A) : option A :=
    Map.(Stdlib.Map.S.find_opt) key t_value.(t.values).
  
  Definition functor `{FArgs} :=
    {|
      S.empty _ := empty;
      S.add _ := add;
      S.cardinal _ := cardinal;
      S.find _ := find
    |}.
End Make.
Definition Make {K_t : Set} (K : Stdlib.Map.OrderedType (t := K_t))
  : S (key := K.(Stdlib.Map.OrderedType.t)) (t := _) :=
  let '_ := Make.Build_FArgs K in
  Make.functor.
