(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Module Ast := Lambda_vm.Ast.

Module Gas := Lambda_vm.Gas.

Include Lambda_vm.Checks.

Definition script : Set := Lambda_vm.Ir.script.

Definition value : Set := Lambda_vm.Ir.value.

Definition pp_value
  : Ppx_deriving_runtime.Format.formatter -> Lambda_vm.Ir.value ->
  Ppx_deriving_runtime.unit := Lambda_vm.Ir.pp_value.

Definition compile_error : Set := Lambda_vm.Compiler._error.

Fixpoint pp_compile_error
  (fmt : Ppx_deriving_runtime.Format.formatter)
  (function_parameter : compile_error) : Ppx_deriving_runtime.unit :=
  let 'Lambda_vm.Compiler.Undefined_variable := function_parameter in
  Ppx_deriving_runtime.Format.pp_print_string fmt "Compiler.Undefined_variable"

with show_compile_error (x_value : compile_error)
  : Ppx_deriving_runtime.string :=
  Ppx_deriving_runtime.Format.asprintf
    (CamlinternalFormatBasics.Format
      (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format)
      "%a") pp_compile_error x_value.

Include Lambda_vm.Compiler.

Definition execution_error : Set := Lambda_vm.Interpreter._error.

Fixpoint pp_execution_error
  (fmt : Ppx_deriving_runtime.Format.formatter)
  (function_parameter : execution_error) : Ppx_deriving_runtime.unit :=
  match function_parameter with
  | Lambda_vm.Interpreter.Undefined_variable =>
    Ppx_deriving_runtime.Format.pp_print_string fmt
      "Interpreter.Undefined_variable"
  | Lambda_vm.Interpreter.Over_applied_primitives =>
    Ppx_deriving_runtime.Format.pp_print_string fmt
      "Interpreter.Over_applied_primitives"
  | Lambda_vm.Interpreter.Value_is_not_pair =>
    Ppx_deriving_runtime.Format.pp_print_string fmt
      "Interpreter.Value_is_not_pair"
  | Lambda_vm.Interpreter.Value_is_not_int64 =>
    Ppx_deriving_runtime.Format.pp_print_string fmt
      "Interpreter.Value_is_not_int64"
  | Lambda_vm.Interpreter.Value_is_not_function =>
    Ppx_deriving_runtime.Format.pp_print_string fmt
      "Interpreter.Value_is_not_function"
  | Lambda_vm.Interpreter.Value_is_not_zero =>
    Ppx_deriving_runtime.Format.pp_print_string fmt
      "Interpreter.Value_is_not_zero"
  end

with show_execution_error (x_value : execution_error)
  : Ppx_deriving_runtime.string :=
  Ppx_deriving_runtime.Format.asprintf
    (CamlinternalFormatBasics.Format
      (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format)
      "%a") pp_execution_error x_value.

Include Lambda_vm.Interpreter.
