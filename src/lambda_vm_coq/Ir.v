(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Definition ident : Set := Lambda_vm.Ident.t.

Definition pp_ident : Stdlib.Format.formatter -> Lambda_vm.Ident.t -> unit :=
  Lambda_vm.Ident.pp.

Inductive prim : Set :=
| P_neg : prim
| P_add : prim
| P_sub : prim
| P_mul : prim
| P_div : prim
| P_rem : prim
| P_land : prim
| P_lor : prim
| P_lxor : prim
| P_lsl : prim
| P_lsr : prim
| P_asr : prim
| P_fst : prim
| P_snd : prim.

Fixpoint pp_prim
  (fmt : Ppx_deriving_runtime.Format.formatter) (function_parameter : prim)
  : Ppx_deriving_runtime.unit :=
  match function_parameter with
  | P_neg => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_neg"
  | P_add => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_add"
  | P_sub => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_sub"
  | P_mul => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_mul"
  | P_div => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_div"
  | P_rem => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_rem"
  | P_land => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_land"
  | P_lor => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_lor"
  | P_lxor => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_lxor"
  | P_lsl => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_lsl"
  | P_lsr => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_lsr"
  | P_asr => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_asr"
  | P_fst => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_fst"
  | P_snd => Ppx_deriving_runtime.Format.pp_print_string fmt "Ir.P_snd"
  end

with show_prim (x_value : prim) : Ppx_deriving_runtime.string :=
  Ppx_deriving_runtime.Format.asprintf
    (CamlinternalFormatBasics.Format
      (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format)
      "%a") pp_prim x_value.

Module Env.
  Definition Lambda_vm_Map_with_cardinality_Make_include :=
    Lambda_vm.Map_with_cardinality.Make
      {|
        Stdlib.Map.OrderedType.compare := Lambda_vm.Ident.compare
      |}.
  
  (** Inclusion of the module [Lambda_vm_Map_with_cardinality_Make_include] *)
  Definition key :=
    Lambda_vm_Map_with_cardinality_Make_include.(Lambda_vm.Map_with_cardinality.S.key).
  
  Definition t :=
    Lambda_vm_Map_with_cardinality_Make_include.(Lambda_vm.Map_with_cardinality.S.t).
  
  Definition empty {a : Set} :=
    Lambda_vm_Map_with_cardinality_Make_include.(Lambda_vm.Map_with_cardinality.S.empty)
      (a := a).
  
  Definition add {a : Set} :=
    Lambda_vm_Map_with_cardinality_Make_include.(Lambda_vm.Map_with_cardinality.S.add)
      (a := a).
  
  Definition cardinal {a : Set} :=
    Lambda_vm_Map_with_cardinality_Make_include.(Lambda_vm.Map_with_cardinality.S.cardinal)
      (a := a).
  
  Definition find {a : Set} :=
    Lambda_vm_Map_with_cardinality_Make_include.(Lambda_vm.Map_with_cardinality.S.find)
      (a := a).
  
  Definition pp {A B : Set} (function_parameter : A)
    : Stdlib.Format.formatter -> B -> unit :=
    let '_ := function_parameter in
    fun (fmt : Stdlib.Format.formatter) =>
      fun (function_parameter : B) =>
        let '_ := function_parameter in
        Stdlib.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.String_literal "<env>"
              CamlinternalFormatBasics.End_of_format) "<env>").
End Env.

(** Records for the constructor parameters *)
Module ConstructorRecords_expr.
  Module expr.
    Module E_app.
      Record record {funct arg : Set} : Set := Build {
        funct : funct;
        arg : arg }.
      Arguments record : clear implicits.
      Definition with_funct {t_funct t_arg} funct (r : record t_funct t_arg) :=
        Build t_funct t_arg funct r.(arg).
      Definition with_arg {t_funct t_arg} arg (r : record t_funct t_arg) :=
        Build t_funct t_arg r.(funct) arg.
    End E_app.
    Definition E_app_skeleton := E_app.record.
    
    Module E_if.
      Record record {predicate consequent alternative : Set} : Set := Build {
        predicate : predicate;
        consequent : consequent;
        alternative : alternative }.
      Arguments record : clear implicits.
      Definition with_predicate {t_predicate t_consequent t_alternative}
        predicate (r : record t_predicate t_consequent t_alternative) :=
        Build t_predicate t_consequent t_alternative predicate r.(consequent)
          r.(alternative).
      Definition with_consequent {t_predicate t_consequent t_alternative}
        consequent (r : record t_predicate t_consequent t_alternative) :=
        Build t_predicate t_consequent t_alternative r.(predicate) consequent
          r.(alternative).
      Definition with_alternative {t_predicate t_consequent t_alternative}
        alternative (r : record t_predicate t_consequent t_alternative) :=
        Build t_predicate t_consequent t_alternative r.(predicate)
          r.(consequent) alternative.
    End E_if.
    Definition E_if_skeleton := E_if.record.
    
    Module E_pair.
      Record record {first second : Set} : Set := Build {
        first : first;
        second : second }.
      Arguments record : clear implicits.
      Definition with_first {t_first t_second} first
        (r : record t_first t_second) :=
        Build t_first t_second first r.(second).
      Definition with_second {t_first t_second} second
        (r : record t_first t_second) :=
        Build t_first t_second r.(first) second.
    End E_pair.
    Definition E_pair_skeleton := E_pair.record.
  End expr.
End ConstructorRecords_expr.
Import ConstructorRecords_expr.

Reserved Notation "'expr.E_app".
Reserved Notation "'expr.E_if".
Reserved Notation "'expr.E_pair".

Inductive expr : Set :=
| E_var : ident -> expr
| E_lam : ident -> expr -> expr
| E_app : 'expr.E_app -> expr
| E_const : int64 -> expr
| E_prim : prim -> expr
| E_if : 'expr.E_if -> expr
| E_pair : 'expr.E_pair -> expr

where "'expr.E_app" := (expr.E_app_skeleton expr expr)
and "'expr.E_if" := (expr.E_if_skeleton expr expr expr)
and "'expr.E_pair" := (expr.E_pair_skeleton expr expr).

Module expr.
  Include ConstructorRecords_expr.expr.
  Definition E_app := 'expr.E_app.
  Definition E_if := 'expr.E_if.
  Definition E_pair := 'expr.E_pair.
End expr.

Fixpoint pp_expr
  : Ppx_deriving_runtime.Format.formatter -> expr -> Ppx_deriving_runtime.unit :=
  let __10 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> expr -> Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_expr
  in let __9 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> expr -> Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_expr
  in let __8 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> expr -> Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_expr
  in let __7 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> expr -> Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_expr
  in let __6 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> expr -> Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_expr
  in let __5 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> prim -> Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_prim
  in let __4 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> expr -> Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_expr
  in let __3 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> expr -> Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_expr
  in let __2 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> expr -> Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_expr
  in let __1 (function_parameter : unit)
    : Stdlib.Format.formatter -> Lambda_vm.Ident.t -> unit :=
    let '_ := function_parameter in
    pp_ident
  in let __0 (function_parameter : unit)
    : Stdlib.Format.formatter -> Lambda_vm.Ident.t -> unit :=
    let '_ := function_parameter in
    pp_ident in
  fun (fmt : Ppx_deriving_runtime.Format.formatter) =>
    fun (function_parameter : expr) =>
      match function_parameter with
      | E_var a0 =>
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Char_literal "(" % char
                (CamlinternalFormatBasics.Formatting_gen
                  (CamlinternalFormatBasics.Open_box
                    (CamlinternalFormatBasics.Format
                      (CamlinternalFormatBasics.String_literal "<2>"
                        CamlinternalFormatBasics.End_of_format) "<2>"))
                  (CamlinternalFormatBasics.String_literal "Ir.E_var"
                    (CamlinternalFormatBasics.Formatting_lit
                      (CamlinternalFormatBasics.Break "@ " 1 0)
                      CamlinternalFormatBasics.End_of_format))))
              "(@[<2>Ir.E_var@ ") in
        let '_ := 0 tt fmt a0 in
        Ppx_deriving_runtime.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Formatting_lit
              CamlinternalFormatBasics.Close_box
              (CamlinternalFormatBasics.Char_literal ")" % char
                CamlinternalFormatBasics.End_of_format)) "@])")
      | E_lam a0 a1 =>
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Char_literal "(" % char
                (CamlinternalFormatBasics.Formatting_gen
                  (CamlinternalFormatBasics.Open_box
                    (CamlinternalFormatBasics.Format
                      (CamlinternalFormatBasics.String_literal "<2>"
                        CamlinternalFormatBasics.End_of_format) "<2>"))
                  (CamlinternalFormatBasics.String_literal "Ir.E_lam ("
                    (CamlinternalFormatBasics.Formatting_lit
                      (CamlinternalFormatBasics.Break "@," 0 0)
                      CamlinternalFormatBasics.End_of_format))))
              "(@[<2>Ir.E_lam (@,") in
        let '_ :=
          let '_ := 1 tt fmt a0 in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Char_literal "," % char
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@ " 1 0)
                    CamlinternalFormatBasics.End_of_format)) ",@ ") in
          2 tt fmt a1 in
        Ppx_deriving_runtime.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Formatting_lit
              (CamlinternalFormatBasics.Break "@," 0 0)
              (CamlinternalFormatBasics.String_literal "))"
                (CamlinternalFormatBasics.Formatting_lit
                  CamlinternalFormatBasics.Close_box
                  CamlinternalFormatBasics.End_of_format))) "@,))@]")
      | E_app {| expr.E_app.funct := afunct; expr.E_app.arg := aarg |} =>
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_gen
                (CamlinternalFormatBasics.Open_box
                  (CamlinternalFormatBasics.Format
                    (CamlinternalFormatBasics.String_literal "<2>"
                      CamlinternalFormatBasics.End_of_format) "<2>"))
                (CamlinternalFormatBasics.String_literal "Ir.E_app {"
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@," 0 0)
                    CamlinternalFormatBasics.End_of_format)))
              "@[<2>Ir.E_app {@,") in
        let '_ :=
          let '_ :=
            let '_ :=
              Ppx_deriving_runtime.Format.fprintf fmt
                (CamlinternalFormatBasics.Format
                  (CamlinternalFormatBasics.Formatting_gen
                    (CamlinternalFormatBasics.Open_box
                      (CamlinternalFormatBasics.Format
                        CamlinternalFormatBasics.End_of_format ""))
                    (CamlinternalFormatBasics.String
                      CamlinternalFormatBasics.No_padding
                      (CamlinternalFormatBasics.String_literal " ="
                        (CamlinternalFormatBasics.Formatting_lit
                          (CamlinternalFormatBasics.Break "@ " 1 0)
                          CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
                "funct" in
            let '_ := 3 tt fmt afunct in
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_lit
                  CamlinternalFormatBasics.Close_box
                  CamlinternalFormatBasics.End_of_format) "@]") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Char_literal ";" % char
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@ " 1 0)
                    CamlinternalFormatBasics.End_of_format)) ";@ ") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_gen
                  (CamlinternalFormatBasics.Open_box
                    (CamlinternalFormatBasics.Format
                      CamlinternalFormatBasics.End_of_format ""))
                  (CamlinternalFormatBasics.String
                    CamlinternalFormatBasics.No_padding
                    (CamlinternalFormatBasics.String_literal " ="
                      (CamlinternalFormatBasics.Formatting_lit
                        (CamlinternalFormatBasics.Break "@ " 1 0)
                        CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
              "arg" in
          let '_ := 4 tt fmt aarg in
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_lit
                CamlinternalFormatBasics.Close_box
                CamlinternalFormatBasics.End_of_format) "@]") in
        Ppx_deriving_runtime.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Formatting_lit
              CamlinternalFormatBasics.Close_box
              (CamlinternalFormatBasics.Char_literal "}" % char
                CamlinternalFormatBasics.End_of_format)) "@]}")
      | E_const a0 =>
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Char_literal "(" % char
                (CamlinternalFormatBasics.Formatting_gen
                  (CamlinternalFormatBasics.Open_box
                    (CamlinternalFormatBasics.Format
                      (CamlinternalFormatBasics.String_literal "<2>"
                        CamlinternalFormatBasics.End_of_format) "<2>"))
                  (CamlinternalFormatBasics.String_literal "Ir.E_const"
                    (CamlinternalFormatBasics.Formatting_lit
                      (CamlinternalFormatBasics.Break "@ " 1 0)
                      CamlinternalFormatBasics.End_of_format))))
              "(@[<2>Ir.E_const@ ") in
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Int64 CamlinternalFormatBasics.Int_d
                CamlinternalFormatBasics.No_padding
                CamlinternalFormatBasics.No_precision
                (CamlinternalFormatBasics.Char_literal "L" % char
                  CamlinternalFormatBasics.End_of_format)) "%LdL") a0 in
        Ppx_deriving_runtime.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Formatting_lit
              CamlinternalFormatBasics.Close_box
              (CamlinternalFormatBasics.Char_literal ")" % char
                CamlinternalFormatBasics.End_of_format)) "@])")
      | E_prim a0 =>
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Char_literal "(" % char
                (CamlinternalFormatBasics.Formatting_gen
                  (CamlinternalFormatBasics.Open_box
                    (CamlinternalFormatBasics.Format
                      (CamlinternalFormatBasics.String_literal "<2>"
                        CamlinternalFormatBasics.End_of_format) "<2>"))
                  (CamlinternalFormatBasics.String_literal "Ir.E_prim"
                    (CamlinternalFormatBasics.Formatting_lit
                      (CamlinternalFormatBasics.Break "@ " 1 0)
                      CamlinternalFormatBasics.End_of_format))))
              "(@[<2>Ir.E_prim@ ") in
        let '_ := 5 tt fmt a0 in
        Ppx_deriving_runtime.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Formatting_lit
              CamlinternalFormatBasics.Close_box
              (CamlinternalFormatBasics.Char_literal ")" % char
                CamlinternalFormatBasics.End_of_format)) "@])")
      |
        E_if {|
          expr.E_if.predicate := apredicate;
            expr.E_if.consequent := aconsequent;
            expr.E_if.alternative := aalternative
            |} =>
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_gen
                (CamlinternalFormatBasics.Open_box
                  (CamlinternalFormatBasics.Format
                    (CamlinternalFormatBasics.String_literal "<2>"
                      CamlinternalFormatBasics.End_of_format) "<2>"))
                (CamlinternalFormatBasics.String_literal "Ir.E_if {"
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@," 0 0)
                    CamlinternalFormatBasics.End_of_format))) "@[<2>Ir.E_if {@,")
          in
        let '_ :=
          let '_ :=
            let '_ :=
              let '_ :=
                Ppx_deriving_runtime.Format.fprintf fmt
                  (CamlinternalFormatBasics.Format
                    (CamlinternalFormatBasics.Formatting_gen
                      (CamlinternalFormatBasics.Open_box
                        (CamlinternalFormatBasics.Format
                          CamlinternalFormatBasics.End_of_format ""))
                      (CamlinternalFormatBasics.String
                        CamlinternalFormatBasics.No_padding
                        (CamlinternalFormatBasics.String_literal " ="
                          (CamlinternalFormatBasics.Formatting_lit
                            (CamlinternalFormatBasics.Break "@ " 1 0)
                            CamlinternalFormatBasics.End_of_format))))
                    "@[%s =@ ") "predicate" in
              let '_ := 6 tt fmt apredicate in
              Ppx_deriving_runtime.Format.fprintf fmt
                (CamlinternalFormatBasics.Format
                  (CamlinternalFormatBasics.Formatting_lit
                    CamlinternalFormatBasics.Close_box
                    CamlinternalFormatBasics.End_of_format) "@]") in
            let '_ :=
              Ppx_deriving_runtime.Format.fprintf fmt
                (CamlinternalFormatBasics.Format
                  (CamlinternalFormatBasics.Char_literal ";" % char
                    (CamlinternalFormatBasics.Formatting_lit
                      (CamlinternalFormatBasics.Break "@ " 1 0)
                      CamlinternalFormatBasics.End_of_format)) ";@ ") in
            let '_ :=
              Ppx_deriving_runtime.Format.fprintf fmt
                (CamlinternalFormatBasics.Format
                  (CamlinternalFormatBasics.Formatting_gen
                    (CamlinternalFormatBasics.Open_box
                      (CamlinternalFormatBasics.Format
                        CamlinternalFormatBasics.End_of_format ""))
                    (CamlinternalFormatBasics.String
                      CamlinternalFormatBasics.No_padding
                      (CamlinternalFormatBasics.String_literal " ="
                        (CamlinternalFormatBasics.Formatting_lit
                          (CamlinternalFormatBasics.Break "@ " 1 0)
                          CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
                "consequent" in
            let '_ := 7 tt fmt aconsequent in
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_lit
                  CamlinternalFormatBasics.Close_box
                  CamlinternalFormatBasics.End_of_format) "@]") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Char_literal ";" % char
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@ " 1 0)
                    CamlinternalFormatBasics.End_of_format)) ";@ ") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_gen
                  (CamlinternalFormatBasics.Open_box
                    (CamlinternalFormatBasics.Format
                      CamlinternalFormatBasics.End_of_format ""))
                  (CamlinternalFormatBasics.String
                    CamlinternalFormatBasics.No_padding
                    (CamlinternalFormatBasics.String_literal " ="
                      (CamlinternalFormatBasics.Formatting_lit
                        (CamlinternalFormatBasics.Break "@ " 1 0)
                        CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
              "alternative" in
          let '_ := 8 tt fmt aalternative in
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_lit
                CamlinternalFormatBasics.Close_box
                CamlinternalFormatBasics.End_of_format) "@]") in
        Ppx_deriving_runtime.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Formatting_lit
              CamlinternalFormatBasics.Close_box
              (CamlinternalFormatBasics.Char_literal "}" % char
                CamlinternalFormatBasics.End_of_format)) "@]}")
      | E_pair {| expr.E_pair.first := afirst; expr.E_pair.second := asecond |}
        =>
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_gen
                (CamlinternalFormatBasics.Open_box
                  (CamlinternalFormatBasics.Format
                    (CamlinternalFormatBasics.String_literal "<2>"
                      CamlinternalFormatBasics.End_of_format) "<2>"))
                (CamlinternalFormatBasics.String_literal "Ir.E_pair {"
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@," 0 0)
                    CamlinternalFormatBasics.End_of_format)))
              "@[<2>Ir.E_pair {@,") in
        let '_ :=
          let '_ :=
            let '_ :=
              Ppx_deriving_runtime.Format.fprintf fmt
                (CamlinternalFormatBasics.Format
                  (CamlinternalFormatBasics.Formatting_gen
                    (CamlinternalFormatBasics.Open_box
                      (CamlinternalFormatBasics.Format
                        CamlinternalFormatBasics.End_of_format ""))
                    (CamlinternalFormatBasics.String
                      CamlinternalFormatBasics.No_padding
                      (CamlinternalFormatBasics.String_literal " ="
                        (CamlinternalFormatBasics.Formatting_lit
                          (CamlinternalFormatBasics.Break "@ " 1 0)
                          CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
                "first" in
            let '_ := 9 tt fmt afirst in
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_lit
                  CamlinternalFormatBasics.Close_box
                  CamlinternalFormatBasics.End_of_format) "@]") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Char_literal ";" % char
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@ " 1 0)
                    CamlinternalFormatBasics.End_of_format)) ";@ ") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_gen
                  (CamlinternalFormatBasics.Open_box
                    (CamlinternalFormatBasics.Format
                      CamlinternalFormatBasics.End_of_format ""))
                  (CamlinternalFormatBasics.String
                    CamlinternalFormatBasics.No_padding
                    (CamlinternalFormatBasics.String_literal " ="
                      (CamlinternalFormatBasics.Formatting_lit
                        (CamlinternalFormatBasics.Break "@ " 1 0)
                        CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
              "second" in
          let '_ := 10 tt fmt asecond in
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_lit
                CamlinternalFormatBasics.Close_box
                CamlinternalFormatBasics.End_of_format) "@]") in
        Ppx_deriving_runtime.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Formatting_lit
              CamlinternalFormatBasics.Close_box
              (CamlinternalFormatBasics.Char_literal "}" % char
                CamlinternalFormatBasics.End_of_format)) "@]}")
      end

with show_expr (x_value : expr) : Ppx_deriving_runtime.string :=
  Ppx_deriving_runtime.Format.asprintf
    (CamlinternalFormatBasics.Format
      (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format)
      "%a") pp_expr x_value.

(** Records for the constructor parameters *)
Module ConstructorRecords_value.
  Module value.
    Module V_pair.
      Record record {first second : Set} : Set := Build {
        first : first;
        second : second }.
      Arguments record : clear implicits.
      Definition with_first {t_first t_second} first
        (r : record t_first t_second) :=
        Build t_first t_second first r.(second).
      Definition with_second {t_first t_second} second
        (r : record t_first t_second) :=
        Build t_first t_second r.(first) second.
    End V_pair.
    Definition V_pair_skeleton := V_pair.record.
    
    Module V_closure.
      Record record {env param body : Set} : Set := Build {
        env : env;
        param : param;
        body : body }.
      Arguments record : clear implicits.
      Definition with_env {t_env t_param t_body} env
        (r : record t_env t_param t_body) :=
        Build t_env t_param t_body env r.(param) r.(body).
      Definition with_param {t_env t_param t_body} param
        (r : record t_env t_param t_body) :=
        Build t_env t_param t_body r.(env) param r.(body).
      Definition with_body {t_env t_param t_body} body
        (r : record t_env t_param t_body) :=
        Build t_env t_param t_body r.(env) r.(param) body.
    End V_closure.
    Definition V_closure_skeleton := V_closure.record.
    
    Module V_primitive.
      Record record {args prim : Set} : Set := Build {
        args : args;
        prim : prim }.
      Arguments record : clear implicits.
      Definition with_args {t_args t_prim} args (r : record t_args t_prim) :=
        Build t_args t_prim args r.(prim).
      Definition with_prim {t_args t_prim} prim (r : record t_args t_prim) :=
        Build t_args t_prim r.(args) prim.
    End V_primitive.
    Definition V_primitive_skeleton := V_primitive.record.
  End value.
End ConstructorRecords_value.
Import ConstructorRecords_value.

Reserved Notation "'value.V_pair".
Reserved Notation "'value.V_closure".
Reserved Notation "'value.V_primitive".

Inductive value : Set :=
| V_int64 : int64 -> value
| V_pair : 'value.V_pair -> value
| V_closure : 'value.V_closure -> value
| V_primitive : 'value.V_primitive -> value

where "'value.V_pair" := (value.V_pair_skeleton value value)
and "'value.V_closure" :=
  (value.V_closure_skeleton (Env.t value) Lambda_vm.Ident.t expr)
and "'value.V_primitive" := (value.V_primitive_skeleton (list value) prim).

Module value.
  Include ConstructorRecords_value.value.
  Definition V_pair := 'value.V_pair.
  Definition V_closure := 'value.V_closure.
  Definition V_primitive := 'value.V_primitive.
End value.

Fixpoint pp_value
  : Ppx_deriving_runtime.Format.formatter -> value -> Ppx_deriving_runtime.unit :=
  let __7 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> prim -> Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_prim
  in let __6 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> value ->
    Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_value
  in let __5 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> expr -> Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_expr
  in let __4 (function_parameter : unit)
    : Stdlib.Format.formatter -> Lambda_vm.Ident.t -> unit :=
    let '_ := function_parameter in
    Lambda_vm.Ident.pp
  in let __3 {A B : Set} (function_parameter : unit)
    : A -> Stdlib.Format.formatter -> B -> unit :=
    let '_ := function_parameter in
    Env.pp
  in let __2 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> value ->
    Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_value
  in let __1 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> value ->
    Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_value
  in let __0 (function_parameter : unit)
    : Ppx_deriving_runtime.Format.formatter -> value ->
    Ppx_deriving_runtime.unit :=
    let '_ := function_parameter in
    pp_value in
  fun (fmt : Ppx_deriving_runtime.Format.formatter) =>
    fun (function_parameter : value) =>
      match function_parameter with
      | V_int64 a0 =>
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Char_literal "(" % char
                (CamlinternalFormatBasics.Formatting_gen
                  (CamlinternalFormatBasics.Open_box
                    (CamlinternalFormatBasics.Format
                      (CamlinternalFormatBasics.String_literal "<2>"
                        CamlinternalFormatBasics.End_of_format) "<2>"))
                  (CamlinternalFormatBasics.String_literal "Ir.V_int64"
                    (CamlinternalFormatBasics.Formatting_lit
                      (CamlinternalFormatBasics.Break "@ " 1 0)
                      CamlinternalFormatBasics.End_of_format))))
              "(@[<2>Ir.V_int64@ ") in
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Int64 CamlinternalFormatBasics.Int_d
                CamlinternalFormatBasics.No_padding
                CamlinternalFormatBasics.No_precision
                (CamlinternalFormatBasics.Char_literal "L" % char
                  CamlinternalFormatBasics.End_of_format)) "%LdL") a0 in
        Ppx_deriving_runtime.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Formatting_lit
              CamlinternalFormatBasics.Close_box
              (CamlinternalFormatBasics.Char_literal ")" % char
                CamlinternalFormatBasics.End_of_format)) "@])")
      |
        V_pair {|
          value.V_pair.first := afirst; value.V_pair.second := asecond |} =>
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_gen
                (CamlinternalFormatBasics.Open_box
                  (CamlinternalFormatBasics.Format
                    (CamlinternalFormatBasics.String_literal "<2>"
                      CamlinternalFormatBasics.End_of_format) "<2>"))
                (CamlinternalFormatBasics.String_literal "Ir.V_pair {"
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@," 0 0)
                    CamlinternalFormatBasics.End_of_format)))
              "@[<2>Ir.V_pair {@,") in
        let '_ :=
          let '_ :=
            let '_ :=
              Ppx_deriving_runtime.Format.fprintf fmt
                (CamlinternalFormatBasics.Format
                  (CamlinternalFormatBasics.Formatting_gen
                    (CamlinternalFormatBasics.Open_box
                      (CamlinternalFormatBasics.Format
                        CamlinternalFormatBasics.End_of_format ""))
                    (CamlinternalFormatBasics.String
                      CamlinternalFormatBasics.No_padding
                      (CamlinternalFormatBasics.String_literal " ="
                        (CamlinternalFormatBasics.Formatting_lit
                          (CamlinternalFormatBasics.Break "@ " 1 0)
                          CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
                "first" in
            let '_ := 0 tt fmt afirst in
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_lit
                  CamlinternalFormatBasics.Close_box
                  CamlinternalFormatBasics.End_of_format) "@]") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Char_literal ";" % char
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@ " 1 0)
                    CamlinternalFormatBasics.End_of_format)) ";@ ") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_gen
                  (CamlinternalFormatBasics.Open_box
                    (CamlinternalFormatBasics.Format
                      CamlinternalFormatBasics.End_of_format ""))
                  (CamlinternalFormatBasics.String
                    CamlinternalFormatBasics.No_padding
                    (CamlinternalFormatBasics.String_literal " ="
                      (CamlinternalFormatBasics.Formatting_lit
                        (CamlinternalFormatBasics.Break "@ " 1 0)
                        CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
              "second" in
          let '_ := 1 tt fmt asecond in
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_lit
                CamlinternalFormatBasics.Close_box
                CamlinternalFormatBasics.End_of_format) "@]") in
        Ppx_deriving_runtime.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Formatting_lit
              CamlinternalFormatBasics.Close_box
              (CamlinternalFormatBasics.Char_literal "}" % char
                CamlinternalFormatBasics.End_of_format)) "@]}")
      |
        V_closure {|
          value.V_closure.env := aenv;
            value.V_closure.param := aparam;
            value.V_closure.body := abody
            |} =>
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_gen
                (CamlinternalFormatBasics.Open_box
                  (CamlinternalFormatBasics.Format
                    (CamlinternalFormatBasics.String_literal "<2>"
                      CamlinternalFormatBasics.End_of_format) "<2>"))
                (CamlinternalFormatBasics.String_literal "Ir.V_closure {"
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@," 0 0)
                    CamlinternalFormatBasics.End_of_format)))
              "@[<2>Ir.V_closure {@,") in
        let '_ :=
          let '_ :=
            let '_ :=
              let '_ :=
                Ppx_deriving_runtime.Format.fprintf fmt
                  (CamlinternalFormatBasics.Format
                    (CamlinternalFormatBasics.Formatting_gen
                      (CamlinternalFormatBasics.Open_box
                        (CamlinternalFormatBasics.Format
                          CamlinternalFormatBasics.End_of_format ""))
                      (CamlinternalFormatBasics.String
                        CamlinternalFormatBasics.No_padding
                        (CamlinternalFormatBasics.String_literal " ="
                          (CamlinternalFormatBasics.Formatting_lit
                            (CamlinternalFormatBasics.Break "@ " 1 0)
                            CamlinternalFormatBasics.End_of_format))))
                    "@[%s =@ ") "env" in
              let '_ :=
                3 tt
                  (fun (fmt : Ppx_deriving_runtime.Format.formatter) => 2 tt fmt)
                  fmt aenv in
              Ppx_deriving_runtime.Format.fprintf fmt
                (CamlinternalFormatBasics.Format
                  (CamlinternalFormatBasics.Formatting_lit
                    CamlinternalFormatBasics.Close_box
                    CamlinternalFormatBasics.End_of_format) "@]") in
            let '_ :=
              Ppx_deriving_runtime.Format.fprintf fmt
                (CamlinternalFormatBasics.Format
                  (CamlinternalFormatBasics.Char_literal ";" % char
                    (CamlinternalFormatBasics.Formatting_lit
                      (CamlinternalFormatBasics.Break "@ " 1 0)
                      CamlinternalFormatBasics.End_of_format)) ";@ ") in
            let '_ :=
              Ppx_deriving_runtime.Format.fprintf fmt
                (CamlinternalFormatBasics.Format
                  (CamlinternalFormatBasics.Formatting_gen
                    (CamlinternalFormatBasics.Open_box
                      (CamlinternalFormatBasics.Format
                        CamlinternalFormatBasics.End_of_format ""))
                    (CamlinternalFormatBasics.String
                      CamlinternalFormatBasics.No_padding
                      (CamlinternalFormatBasics.String_literal " ="
                        (CamlinternalFormatBasics.Formatting_lit
                          (CamlinternalFormatBasics.Break "@ " 1 0)
                          CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
                "param" in
            let '_ := 4 tt fmt aparam in
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_lit
                  CamlinternalFormatBasics.Close_box
                  CamlinternalFormatBasics.End_of_format) "@]") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Char_literal ";" % char
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@ " 1 0)
                    CamlinternalFormatBasics.End_of_format)) ";@ ") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_gen
                  (CamlinternalFormatBasics.Open_box
                    (CamlinternalFormatBasics.Format
                      CamlinternalFormatBasics.End_of_format ""))
                  (CamlinternalFormatBasics.String
                    CamlinternalFormatBasics.No_padding
                    (CamlinternalFormatBasics.String_literal " ="
                      (CamlinternalFormatBasics.Formatting_lit
                        (CamlinternalFormatBasics.Break "@ " 1 0)
                        CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
              "body" in
          let '_ := 5 tt fmt abody in
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_lit
                CamlinternalFormatBasics.Close_box
                CamlinternalFormatBasics.End_of_format) "@]") in
        Ppx_deriving_runtime.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Formatting_lit
              CamlinternalFormatBasics.Close_box
              (CamlinternalFormatBasics.Char_literal "}" % char
                CamlinternalFormatBasics.End_of_format)) "@]}")
      |
        V_primitive {|
          value.V_primitive.args := aargs;
            value.V_primitive.prim := aprim
            |} =>
        let '_ :=
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_gen
                (CamlinternalFormatBasics.Open_box
                  (CamlinternalFormatBasics.Format
                    (CamlinternalFormatBasics.String_literal "<2>"
                      CamlinternalFormatBasics.End_of_format) "<2>"))
                (CamlinternalFormatBasics.String_literal "Ir.V_primitive {"
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@," 0 0)
                    CamlinternalFormatBasics.End_of_format)))
              "@[<2>Ir.V_primitive {@,") in
        let '_ :=
          let '_ :=
            let '_ :=
              Ppx_deriving_runtime.Format.fprintf fmt
                (CamlinternalFormatBasics.Format
                  (CamlinternalFormatBasics.Formatting_gen
                    (CamlinternalFormatBasics.Open_box
                      (CamlinternalFormatBasics.Format
                        CamlinternalFormatBasics.End_of_format ""))
                    (CamlinternalFormatBasics.String
                      CamlinternalFormatBasics.No_padding
                      (CamlinternalFormatBasics.String_literal " ="
                        (CamlinternalFormatBasics.Formatting_lit
                          (CamlinternalFormatBasics.Break "@ " 1 0)
                          CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
                "args" in
            let '_ :=
              (fun (x_value : list value) =>
                let '_ :=
                  Ppx_deriving_runtime.Format.fprintf fmt
                    (CamlinternalFormatBasics.Format
                      (CamlinternalFormatBasics.Formatting_gen
                        (CamlinternalFormatBasics.Open_box
                          (CamlinternalFormatBasics.Format
                            (CamlinternalFormatBasics.String_literal "<2>"
                              CamlinternalFormatBasics.End_of_format) "<2>"))
                        (CamlinternalFormatBasics.Char_literal "[" % char
                          CamlinternalFormatBasics.End_of_format)) "@[<2>[") in
                let '_ :=
                  Ppx_deriving_runtime.ignore
                    (Ppx_deriving_runtime.List.fold_left
                      (fun (sep : bool) =>
                        fun (x_value : value) =>
                          let '_ :=
                            if sep then
                              Ppx_deriving_runtime.Format.fprintf fmt
                                (CamlinternalFormatBasics.Format
                                  (CamlinternalFormatBasics.Char_literal
                                    ";" % char
                                    (CamlinternalFormatBasics.Formatting_lit
                                      (CamlinternalFormatBasics.Break "@ " 1 0)
                                      CamlinternalFormatBasics.End_of_format))
                                  ";@ ")
                            else
                              tt in
                          let '_ := 6 tt fmt x_value in
                          true) false x_value) in
                Ppx_deriving_runtime.Format.fprintf fmt
                  (CamlinternalFormatBasics.Format
                    (CamlinternalFormatBasics.Formatting_lit
                      (CamlinternalFormatBasics.Break "@," 0 0)
                      (CamlinternalFormatBasics.Char_literal "]" % char
                        (CamlinternalFormatBasics.Formatting_lit
                          CamlinternalFormatBasics.Close_box
                          CamlinternalFormatBasics.End_of_format))) "@,]@]"))
                aargs in
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_lit
                  CamlinternalFormatBasics.Close_box
                  CamlinternalFormatBasics.End_of_format) "@]") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Char_literal ";" % char
                  (CamlinternalFormatBasics.Formatting_lit
                    (CamlinternalFormatBasics.Break "@ " 1 0)
                    CamlinternalFormatBasics.End_of_format)) ";@ ") in
          let '_ :=
            Ppx_deriving_runtime.Format.fprintf fmt
              (CamlinternalFormatBasics.Format
                (CamlinternalFormatBasics.Formatting_gen
                  (CamlinternalFormatBasics.Open_box
                    (CamlinternalFormatBasics.Format
                      CamlinternalFormatBasics.End_of_format ""))
                  (CamlinternalFormatBasics.String
                    CamlinternalFormatBasics.No_padding
                    (CamlinternalFormatBasics.String_literal " ="
                      (CamlinternalFormatBasics.Formatting_lit
                        (CamlinternalFormatBasics.Break "@ " 1 0)
                        CamlinternalFormatBasics.End_of_format)))) "@[%s =@ ")
              "prim" in
          let '_ := 7 tt fmt aprim in
          Ppx_deriving_runtime.Format.fprintf fmt
            (CamlinternalFormatBasics.Format
              (CamlinternalFormatBasics.Formatting_lit
                CamlinternalFormatBasics.Close_box
                CamlinternalFormatBasics.End_of_format) "@]") in
        Ppx_deriving_runtime.Format.fprintf fmt
          (CamlinternalFormatBasics.Format
            (CamlinternalFormatBasics.Formatting_lit
              CamlinternalFormatBasics.Close_box
              (CamlinternalFormatBasics.Char_literal "}" % char
                CamlinternalFormatBasics.End_of_format)) "@]}")
      end

with show_value (x_value : value) : Ppx_deriving_runtime.string :=
  Ppx_deriving_runtime.Format.asprintf
    (CamlinternalFormatBasics.Format
      (CamlinternalFormatBasics.Alpha CamlinternalFormatBasics.End_of_format)
      "%a") pp_value x_value.

Module script.
  Record record : Set := Build {
    param : Lambda_vm.Ident.t;
    code : expr }.
  Definition with_param param (r : record) :=
    Build param r.(code).
  Definition with_code code (r : record) :=
    Build r.(param) code.
End script.
Definition script := script.record.
